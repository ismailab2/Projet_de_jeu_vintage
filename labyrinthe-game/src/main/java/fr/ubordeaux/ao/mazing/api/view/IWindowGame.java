package fr.ubordeaux.ao.mazing.api;

import java.awt.Color;
import java.awt.geom.Point2D;

/**
 * Interface g√©n√©rique repr√©sentant une fen√™tre de jeu (2D ou isom√©trique).
 * 
 * 
 * Cette interface fournit un ensemble de m√©thodes pour :
 * <ul>
 * <li>configurer la fen√™tre du jeu (titre, taille, fond...)</li>
 * <li>afficher et manipuler des tuiles (tiles) ou objets</li>
 * <li>ajouter des personnages anim√©s</li>
 * <li>g√©rer le d√©filement (scrolling) et le taux de rafra√Æchissement (FPS)</li>
 * </ul>
 * 
 * Elle sert de contrat entre la logique du jeu (mod√®le/contr√¥leur)
 * et le moteur d‚Äôaffichage graphique.
 * 
 */
public interface IWindowGame {

    // =========================
    // üé® CONFIGURATION G√âN√âRALE
    // =========================

    /**
     * D√©finit si la fen√™tre doit √™tre visible √† l‚Äô√©cran.
     *
     * @param b true pour afficher la fen√™tre, false pour la masquer
     */
    void setVisible(boolean b);

    /**
     * D√©finit la taille des tuiles utilis√©es pour le rendu.
     *
     * @param tileSize  taille d‚Äôune tuile (en pixels)
     */
    void setTileSize(int tileSize);

    /**
     * D√©finit le nombre d‚Äôimages par seconde (FPS) pour les animations.
     *
     * @param fps fr√©quence d‚Äôaffichage souhait√©e (ex. 60 pour 60 FPS)
     */
    void setFPS(int fps);

    // =========================
    // üß≠ D√âPLACEMENT / SCROLL
    // =========================

    /**
     * Fait d√©filer la sc√®ne selon un d√©calage donn√©.
     *
     * @param x d√©placement horizontal du point d‚Äôorigine (positif = droite)
     * @param y d√©placement vertical du point d‚Äôorigine (positif = bas)
     */
    void scroll(int x, int y);

    // =========================
    // üß± GESTION DU PLATEAU
    // =========================

    /**
     * Remplit la sc√®ne avec un fond uniforme de tuiles.
     *
     * @param code   identifiant de la tuile √† utiliser
     * @param x      position de d√©part en X (grille)
     * @param y      position de d√©part en Y (grille)
     * @param width  largeur en nombre de tuiles
     * @param height hauteur en nombre de tuiles
     * @param alpha  transparence (0.0 = transparent, 1.0 = opaque)
     */
    void fillArea(int code, int x, int y, int z, int width, int height, float alpha, float brightness);

    /**
     * Remplit la sc√®ne avec un fond uniforme de tuiles (opaque).
     *
     * @param code   identifiant de la tuile √† utiliser
     * @param x      position de d√©part en X (grille)
     * @param y      position de d√©part en Y (grille)
     * @param width  largeur en nombre de tuiles
     * @param height hauteur en nombre de tuiles
     */
    void fillArea(int code, int x, int y, int z, int width, int height);

    /**
     * Remplit la sc√®ne avec un fond en damier.
     *
     * @param x      position de d√©part en X
     * @param y      position de d√©part en Y
     * @param width  largeur en nombre de tuiles
     * @param height hauteur en nombre de tuiles
     */
    void fillCheckerboardBackground(int x, int y, int width, int height);

    /**
     * Vide compl√®tement la sc√®ne (tuiles et objets).
     */
    void clear();

    // =========================
    // üëæ AJOUT D‚ÄôOBJETS / TUILES
    // =========================

    /**
     * Ajoute un personnage (ex. {@link Crusader}, {@link Spider}, etc.) √† la sc√®ne.
     *
     * @param character l‚Äôobjet personnage √† ajouter
     */
    void add(ICharacter<? extends ICharacterMode> character);

    /**
     * Supprime un personnage (ex. {@link Crusader}, {@link Spider}, etc.) de la sc√®ne.
     *
     * @param character l‚Äôobjet personnage √† supprimer
     */
    void remove(ICharacter<? extends ICharacterMode> character);

    /**
     * Ajoute un √©l√©ment (tuile, d√©cor, objet) √† une position donn√©e avec
     * transparence.
     *
     * @param code  identifiant de la tuile ou de l‚Äôobjet
     * @param x     coordonn√©e X sur la grille
     * @param y     coordonn√©e Y sur la grille
     * @param z     hauteur (niveau)
     * @param alpha transparence (0.0 = invisible, 1.0 = opaque)
     */
    void add(int code, int x, int y, int z, float alpha);

    /**
     * Ajoute un √©l√©ment (tuile, d√©cor, objet) opaque √† la sc√®ne.
     *
     * @param code identifiant de la tuile ou de l‚Äôobjet
     * @param x    coordonn√©e X sur la grille
     * @param y    coordonn√©e Y sur la grille
     * @param z    hauteur (niveau)
     */
    void add(int code, int x, int y, int z);

    /**
     * supprime (tuile, d√©cor, objet) √† une position donn√©e
     *
     * @param code identifiant de la tuile ou de l‚Äôobjet
     * @param x    coordonn√©e X sur la grille
     * @param y    coordonn√©e Y sur la grille
     * @param z    hauteur (niveau)
     */
    void remove(int code, int x, int y, int z);

    /**
     * Ajoute un ensemble complet de tuiles (matrice 3D).
     *
     * @param matrix matrice [x][y][z] repr√©sentant le plateau
     */
    void add(int[][][] matrix);

    /**
     * Ajoute un ensemble complet de tuiles (matrice 3D).
     *
     * @param matrix matrice [x][y][z] repr√©sentant le plateau
     * @param alpha  transparence (0.0 = invisible, 1.0 = opaque)
     */
    void add(int[][][] matrix, float alpha);

    // =========================
    // ‚úèÔ∏è OUTILS DE DESSIN
    // =========================

    /**
     * Dessine une tuile unie d‚Äôune certaine couleur aux coordonn√©es indiqu√©es.
     *
     * @param color couleur √† dessiner
     * @param x     coordonn√©e X sur la grille
     * @param y     coordonn√©e Y sur la grille
     * @param z     hauteur (niveau)
     */
    void addTileBackground(Color color, int x, int y, int z);

    /**
     * Dessine un cube de la taille d'une tuile uni d‚Äôune certaine couleur aux
     * coordonn√©es indiqu√©es.
     *
     * @param color couleur √† dessiner
     * @param x     coordonn√©e X sur la grille
     * @param y     coordonn√©e Y sur la grille
     * @param z     hauteur (niveau)
     */
    void addCubeBackground(Color color, int x, int y, int z);

    /**
     * Convertit un point de la fen√™tre (coordonn√©es √©cran) en coordonn√©es
     * isom√©triques sur la carte.
     *
     * Cette m√©thode prend les coordonn√©es d‚Äôun point en pixels dans la fen√™tre et
     * calcule
     * la position correspondante dans le rep√®re de la grille isom√©trique du jeu.
     *
     * @param x La coordonn√©e horizontale (en pixels) dans la fen√™tre.
     * @param y La coordonn√©e verticale (en pixels) dans la fen√™tre.
     * @return Un objet {@link Point2D} repr√©sentant les coordonn√©es isom√©triques
     *         (colonne, ligne) correspondantes.
     */
    Point2D getIsoCoordinatesFromScreen(int x, int y);

    /**
     * Joue un son √† partir de son identifiant (ex: "weapons/explosion").
     * Le fichier doit exister dans le dossier d√©fini par SoundManager (par d√©faut
     * "sounds/").
     *
     * Exemple :
     * windowGame.playSound("weapons/explosion");
     * -> joue "sounds/weapons/explosion.wav"
     */
    public void playSound(String soundId);

    /**
     * Initialise les images d'une spritesheet en d√©coupant chaque tuile et en les
     * enregistrant dans le mapping interne pour le rendu.
     *
     * Cette m√©thode :
     * 
     * Charge l'image depuis le chemin sp√©cifi√©.
     * D√©coupe la spritesheet en tuiles de dimensions {@code width} x
     * {@code height}.
     * Applique un facteur de mise √† l‚Äô√©chelle {@code scale}.
     * D√©cale chaque image de {@code offsetX} pixels horizontalement et
     * {@code offsetY} pixels verticalement dans sa zone de rendu.
     * Attribue un code de d√©part {@code offset} pour identifier les images
     * dans le mapping interne.
     * </ul>
     *
     * @param path    chemin vers le fichier de la spritesheet √† charger
     * @param width   largeur d'une tuile dans la spritesheet (en pixels)
     * @param height  hauteur d'une tuile dans la spritesheet (en pixels)
     * @param scale   facteur de mise √† l‚Äô√©chelle appliqu√© √† chaque tuile
     * @param offsetX d√©calage horizontal (en pixels) √† appliquer √† chaque tuile
     * @param offsetY d√©calage vertical (en pixels) √† appliquer √† chaque tuile
     * @param offset  code de d√©part pour les images d√©coup√©es, utilis√© dans le
     *                mapping interne
     */
    void initImagesSheet(String path, int width, int height, float scale, int offsetX, int offsetY, int offset);

}
