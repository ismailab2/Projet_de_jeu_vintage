package fr.ubordeaux.ao.mazing.api;

import java.awt.Color;
import java.util.UUID;
import java.util.function.Predicate;

/**
 * Interface g√©n√©rique repr√©sentant un personnage ou une entit√© anim√©e dans le jeu.
 *
 * 
 * Cette interface d√©finit le comportement commun √† tout personnage affichable
 * dans le moteur isom√©trique (par exemple : {@link Crusader}, {@link Spider}, etc.).
 * 
 *
 * 
 * Elle permet de :
 * 
 *   -positionner le personnage dans l‚Äôespace 3D (x, y, z)
 *   -changer son orientation (direction)
 *   -modifier son √©tat ou animation (mode)
 *   -d√©finir des callbacks d√©clench√©s √† diff√©rents moments des animations
 *   -ajuster la taille (scale) ou le d√©calage (offset) visuel
 * 
 * 
 *
 * @param <S> Type repr√©sentant les modes possibles du personnage
 *            (par ex. {@link Crusader.Mode} ou {@link Spider.Mode})
 */
public interface ICharacter<S extends ICharacterMode> {

    // =========================
    // üìç POSITION ET DIRECTION
    // =========================

    /**
     * D√©finit la position du personnage dans l‚Äôespace du jeu.
     *
     * @param x position horizontale (axe des colonnes)
     * @param y position verticale (axe des lignes)
     * @param z hauteur (niveau, pour effets de saut ou d√©calage vertical)
     */
    void setPosition(float x, float y, float z);

    /**
     * D√©finit la position de l'ombre du personnage dans l‚Äôespace du jeu.
     *
     * @param x position horizontale (axe des colonnes)
     * @param y position verticale (axe des lignes)
     * @param z hauteur (niveau, pour murs)
     */
    void setShadowPosition(float x, float y, float z);

    /**
     * D√©finit la direction vers laquelle le personnage est orient√©.
     *
     * @param targetDirection direction cible (ex. {@link Direction#NORTH})
     * @param time dur√©e de la rotation vers la direction en ms
     */
    void setDirection(Direction targetDirection, int time);

    /**
     * D√©finit la direction vers laquelle le personnage est orient√©.
     *
     * @param direction direction cible (ex. {@link Direction#NORTH})
     */
    void setDirection(Direction direction);

    /**
     * D√©finit la direction vers laquelle le personnage est orient√©.
     *
     * @param directionName nom de la direction cible
     */
    void setDirection(String directionName);

    // =========================
    // üé¨ MODES / ANIMATIONS
    // =========================

    /**
     * D√©finit le mode actuel du personnage.
     * 
     * Le mode d√©termine l‚Äôanimation √† jouer (ex. {@code WALK}, {@code RUN}, {@code ATTACK}, etc.).
     * 
     *
     * @param mode mode du personnage
     */
    void setMode(S mode);

    /**
     * D√©finit le mode actuel du personnage.
     * 
     * Le mode d√©termine l‚Äôanimation √† jouer
     * 
     *
     * @param modeName mode du personnage
     */
    void setMode(String modeName);

    /**
     * D√©finit la vitesse d'animation
     * 
     *
     * @param mode
     * @param fps vitesse
     */
    void setFrameRate(S mode, float fps);

    // =========================
    // ‚è±Ô∏è CALLBACKS D‚ÄôANIMATION
    // =========================

    /**
     * D√©clencheur appel√© au d√©but de l‚Äôanimation.
     * 
     * Peut servir √† initialiser un effet ou un son.
     * 
     *
     * @param callback fonction appel√©e au d√©but de l‚Äôanimation
     */
    void setBeginAnimationTrigger(Predicate<ICharacter<?>> callback);

    /**
     * D√©clencheur appel√© au milieu de l‚Äôanimation.
     * 
     * Souvent utilis√© pour synchroniser un effet (par exemple : impact d‚Äôune attaque).
     * 
     *
     * @param callback fonction appel√©e √† la moiti√© de l‚Äôanimation
     */
    void setMidAnimationTrigger(Predicate<ICharacter<?>> callback);

    /**
     * D√©clencheur appel√© √† la fin de l‚Äôanimation.
     * 
     * Peut servir √† remettre le personnage √† l‚Äô√©tat {@code IDLE}, ou encha√Æner une autre animation.
     * 
     *
     * @param callback fonction appel√©e √† la fin de l‚Äôanimation
     */
    void setEndAnimationTrigger(Predicate<ICharacter<?>> callback);

    /**
     * D√©clencheur appel√© √† chaque "tick" d‚Äôanimation (frame ou mise √† jour du jeu).
     * 
     * Id√©al pour mettre √† jour dynamiquement la position, la physique ou d‚Äôautres param√®tres.
     * 
     *
     * @param callback fonction appel√©e √† chaque tick d‚Äôanimation
     */
    void setTickAnimationTrigger(Predicate<ICharacter<?>> callback);

    // =========================
    // üß© APPARENCE VISUELLE
    // =========================

    /**
     * D√©finit un facteur d‚Äô√©chelle pour le personnage.
     * 
     * Exemple : 1.0 = taille normale, 2.0 = deux fois plus grand.
     * 
     *
     * @param scale facteur d‚Äô√©chelle (> 0)
     */
    void setScale(float scale);

    /**
     * D√©finit la position du personnage.
     * 
     * @param x
     * @param y
     */
    void setOffset(float x, float y);

    /**
     * Donne l'identificateur du personnage.
     * 
     */
    UUID getId();

    float getFrameIndex();
    
    /**
     * D√©finit la luminosit√© du personnage.
     * 
     * @param brightness : 0f < brightness < 1f sombre √† clair
     */
    void setBrightness(float brightness);

    void setColor(Color color);

}
